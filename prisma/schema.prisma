// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                     @id @default(autoincrement())
  username               String
  email                  String                  @unique
  password               String
  secret                 String
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  verification_codes     VerificationCodes?
  tokens                 Tokens[]
  todos                  Todos[]
  banks                  Banks[]
  accounts               Accounts[]
  recurring_transactions RecurringTransaction[]
  transaction_categories TransactionCategories[]

  @@map("users")
}

model VerificationCodes {
  id      Int      @id @default(autoincrement())
  user_id Int      @unique
  code    String   @unique
  iat     DateTime
  user    User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model Tokens {
  id          Int      @id @default(autoincrement())
  user_id     Int
  sum         String   @unique
  token       String
  is_refresh  Boolean
  expires     DateTime
  blacklisted Boolean  @default(false)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Todos {
  id         Int       @id @default(autoincrement())
  user_id    Int
  name       String
  completed  Boolean   @default(false)
  deadline   DateTime?
  parent_id  Int?
  frequency  String?
  icon       String
  color      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  parent     Todos?    @relation("child_todos", fields: [parent_id], references: [id])
  todos      Todos[]   @relation("child_todos")

  @@map("todos")
}

model Tips {
  id     Int     @id @default(autoincrement())
  tips   String  @unique
  author String?
  order  Int     @unique

  @@map("tips")
}

model Banks {
  id      Int        @id @default(autoincrement())
  name    String
  user_id Int?
  user    User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account Accounts[]

  @@unique([name, user_id])
  @@map("banks")
}

model Accounts {
  id                          Int                    @id @default(autoincrement())
  name                        String
  amount                      String
  bank_id                     Int
  user_id                     Int
  bank                        Banks                  @relation(fields: [bank_id], references: [id], onDelete: Restrict)
  user                        User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  from_recurring_transactions RecurringTransaction[] @relation("from_account")
  to_recurring_transactions   RecurringTransaction[] @relation("to_account")
  internal_ledger             InternalLedger[]

  @@unique([name, user_id, bank_id])
  @@map("accounts")
}

model RecurringTransaction {
  id              Int                    @id @default(autoincrement())
  user_id         Int
  wording         String
  type            String
  amount          String
  next_occurrence DateTime
  frequency       String
  category_id     Int?
  from_account_id Int?
  to_account_id   Int?
  created_at      DateTime               @default(now())
  updated_at      DateTime               @updatedAt
  user            User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category        TransactionCategories? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  from_account    Accounts?              @relation("from_account", fields: [from_account_id], references: [id], onDelete: Cascade)
  to_account      Accounts?              @relation("to_account", fields: [to_account_id], references: [id], onDelete: Cascade)

  @@map("recurring_transactions")
}

model TransactionCategories {
  id                     Int                    @id @default(autoincrement())
  user_id                Int?
  name                   String
  icon                   String
  color                  String
  user                   User?                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  recurring_transactions RecurringTransaction[]
  internal_transactions  InternalTransactions[]
  expense_transactions   ExpenseTransactions[]
  income_transactions    IncomeTransactions[]

  @@map("transaction_categories")
}

model InternalLedger {
  id                  Int                    @id @default(autoincrement())
  account_id          Int
  debit               String?
  credit              String?
  created_at          DateTime               @default(now())
  account             Accounts               @relation(fields: [account_id], references: [id], onDelete: Cascade)
  debit_ledger        InternalTransactions[] @relation("debit_ledger")
  credit_ledger       InternalTransactions[] @relation("credit_ledger")
  expense_transaction ExpenseTransactions[]  @relation()
  income_transaction  IncomeTransactions[]   @relation()

  @@map("internal_ledger")
}

model TransactionTypes {
  ulid             String @id
  transaction_type String

  @@map("transaction_types")
}

model FutureTransactions {
  id                Int      @id @default(autoincrement())
  amount            String
  wording           String
  category_id       Int
  debit_account_id  Int?
  credit_account_id Int?
  transaction_type  String
  processed_at      DateTime

  @@map("future_transactions")
}

model InternalTransactions {
  ulid                      String                 @id
  wording                   String?
  category_id               Int
  debit_internal_ledger_id  Int                    @unique
  credit_internal_ledger_id Int                    @unique
  rectification_ulid        String?
  created_at                DateTime               @default(now())
  category                  TransactionCategories  @relation(fields: [category_id], references: [id])
  debit_ledger              InternalLedger         @relation("debit_ledger", fields: [debit_internal_ledger_id], references: [id])
  credit_ledger             InternalLedger         @relation("credit_ledger", fields: [credit_internal_ledger_id], references: [id])
  rectification             InternalTransactions?  @relation("rectification", fields: [rectification_ulid], references: [ulid])
  internal_transactions     InternalTransactions[] @relation("rectification")

  @@map("internal_transactions")
}

model ExpenseTransactions {
  ulid                 String                @id
  wording              String?
  category_id          Int
  internal_ledger_id   Int                   @unique
  rectification_ulid   String?
  created_at           DateTime              @default(now())
  category             TransactionCategories @relation(fields: [category_id], references: [id])
  internal_ledger      InternalLedger        @relation(fields: [internal_ledger_id], references: [id])
  rectification        ExpenseTransactions?  @relation("rectification", fields: [rectification_ulid], references: [ulid])
  expense_transactions ExpenseTransactions[] @relation("rectification")

  @@map("expense_transactions")
}

model IncomeTransactions {
  ulid                String                @id
  wording             String?
  category_id         Int
  internal_ledger_id  Int                   @unique
  rectification_ulid  String?
  created_at          DateTime              @default(now())
  category            TransactionCategories @relation(fields: [category_id], references: [id])
  internal_ledger     InternalLedger        @relation(fields: [internal_ledger_id], references: [id])
  rectification       IncomeTransactions?   @relation("rectification", fields: [rectification_ulid], references: [ulid])
  income_transactions IncomeTransactions[]  @relation("rectification")

  @@map("income_transactions")
}

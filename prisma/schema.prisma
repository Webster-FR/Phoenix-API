// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Statistics {
  id Int @id @default(autoincrement())

  global_request_count        Int
  get_global_request_count    Int
  post_global_request_count   Int
  put_global_request_count    Int
  patch_global_request_count  Int
  delete_global_request_count Int

  global_response_time_average        Float
  get_global_response_time_average    Float
  post_global_response_time_average   Float
  put_global_response_time_average    Float
  patch_global_response_time_average  Float
  delete_global_response_time_average Float

  global_response_time_max        Float
  get_global_response_time_max    Float
  post_global_response_time_max   Float
  put_global_response_time_max    Float
  patch_global_response_time_max  Float
  delete_global_response_time_max Float

  global_response_time_min        Float
  get_global_response_time_min    Float
  post_global_response_time_min   Float
  put_global_response_time_min    Float
  patch_global_response_time_min  Float
  delete_global_response_time_min Float

  global_content_length_average        Float
  get_global_content_length_average    Float
  post_global_content_length_average   Float
  put_global_content_length_average    Float
  patch_global_content_length_average  Float
  delete_global_content_length_average Float

  global_content_length_max        Float
  get_global_content_length_max    Float
  post_global_content_length_max   Float
  put_global_content_length_max    Float
  patch_global_content_length_max  Float
  delete_global_content_length_max Float

  global_content_length_min        Float
  get_global_content_length_min    Float
  post_global_content_length_min   Float
  put_global_content_length_min    Float
  patch_global_content_length_min  Float
  delete_global_content_length_min Float

  created_at DateTime @default(now())

  @@map("statistics")
}

model Users {
  id                     Int                     @id @default(autoincrement())
  username               String
  password               String
  email                  String
  email_sum              String
  secret                 String
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  verification_codes     VerificationCodes?
  PasswordRecoveryCodes  PasswordRecoveryCodes?
  todo_lists             TodoLists[]
  AccessToken            AccessTokens[]
  RefreshToken           RefreshTokens[]

  @@map("users")
}

model VerificationCodes {
  id      Int      @id @default(autoincrement())
  user_id Int      @unique
  code    String   @unique
  iat     DateTime
  user    Users?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model PasswordRecoveryCodes {
  id      Int      @id @default(autoincrement())
  user_id Int      @unique
  code    String   @unique
  iat     DateTime
  user    Users?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("password_recovery_codes")
}

model AccessTokens {
  id               Int            @id @default(autoincrement())
  user_id          Int
  sum              String         @unique
  token            String         @unique
  refresh_token_id Int?           @unique
  expires          DateTime
  blacklisted      Boolean        @default(false)
  user             Users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  refresh_token    RefreshTokens? @relation(fields: [refresh_token_id], references: [id], onDelete: Cascade)

  @@map("access_tokens")
}

model RefreshTokens {
  id          Int      @id @default(autoincrement())
  user_id     Int
  sum         String   @unique
  token       String   @unique
  expires     DateTime
  blacklisted Boolean  @default(false)
  user        Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  AccessToken AccessTokens?

  @@map("refresh_tokens")
}

model TodoLists {
  id         Int      @id @default(autoincrement())
  user_id    Int
  name       String
  icon       String
  color      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  todos      Tasks[]

  @@index([user_id])
  @@map("todo_lists")
}

model Tasks {
  id           Int       @id @default(autoincrement())
  name         String
  completed    Boolean   @default(false)
  deadline     DateTime?
  todo_list_id Int
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  todo_list    TodoLists @relation(fields: [todo_list_id], references: [id], onDelete: Cascade)

  @@index([todo_list_id])
  @@map("tasks")
}

model Tips {
  id     Int     @id @default(autoincrement())
  tips   String  @unique
  author String?
  order  Int     @unique

  @@map("tips")
}
